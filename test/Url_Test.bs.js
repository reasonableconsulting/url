// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Url = require("../src/Url.bs.js");
var Jest = require("@glennsl/bs-jest/src/jest.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");

describe("url-parse", (function () {
        describe("defaults to empty address to return valid URL instance", (function () {
                var url = Url.fromString(undefined, "");
                Jest.test("href", (function (param) {
                        return Jest.Expect[/* toEqual */12]("", Jest.Expect[/* expect */0](url[/* href */0]));
                      }));
                Jest.test("protocol", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](url[/* protocol */1]));
                      }));
                Jest.test("slashes", (function (param) {
                        return Jest.Expect[/* toEqual */12](false, Jest.Expect[/* expect */0](url[/* slashes */2]));
                      }));
                Jest.test("origin", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](url[/* origin */3]));
                      }));
                Jest.test("host", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](url[/* host */4]));
                      }));
                Jest.test("hostname", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](url[/* hostname */5]));
                      }));
                Jest.test("port", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](url[/* port */6]));
                      }));
                Jest.test("auth", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](url[/* auth */7]));
                      }));
                Jest.test("username", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](url[/* username */8]));
                      }));
                Jest.test("password", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](url[/* password */9]));
                      }));
                Jest.test("pathname", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](url[/* pathname */10]));
                      }));
                Jest.test("querystring", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](url[/* querystring */11]));
                      }));
                return Jest.test("hash", (function (param) {
                              return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](url[/* hash */12]));
                            }));
              }));
        Jest.test("does not add question mark to href if query string is empty", (function (param) {
                var url = "http://google.com/";
                var data = Url.fromString(undefined, url);
                return Jest.Expect[/* toEqual */12](url, Jest.Expect[/* expect */0](data[/* href */0]));
              }));
        Jest.test("allows a custom location object", (function (param) {
                var data = Url.fromString(Url.fromString(undefined, "http://google.com"), "/foo?foo=bar");
                return Jest.Expect[/* toEqual */12]("http://google.com/foo?foo=bar", Jest.Expect[/* expect */0](data[/* href */0]));
              }));
        describe("can parse complex urls multiple times without errors", (function () {
                var url = "https://www.mozilla.org/en-US/firefox/34.0/whatsnew/?oldversion=33.1";
                var data = Belt_List.makeBy(100, (function (param) {
                        return Url.fromString(undefined, url);
                      }));
                return Jest.testAll("run all", data, (function (parsed) {
                              return Jest.Expect[/* toEqual */12](url, Jest.Expect[/* expect */0](parsed[/* href */0]));
                            }));
              }));
        Jest.test("converts hostname to lowercase", (function (param) {
                return Jest.Expect[/* toEqual */12]("foo.example.com", Jest.Expect[/* expect */0](Url.fromString(undefined, "HTTP://fOo.eXaMPle.com")[/* hostname */5]));
              }));
        Jest.test("does not lowercase the path", (function (param) {
                return Jest.Expect[/* toEqual */12]("/Y/Z", Jest.Expect[/* expect */0](Url.fromString(undefined, "HTTP://X.COM/Y/Z")[/* pathname */10]));
              }));
        describe("removes default port numbers", (function () {
                var parsed = Url.fromString(undefined, "http://example.com:80");
                Jest.test("port", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](parsed[/* port */6]));
                      }));
                Jest.test("host", (function (param) {
                        return Jest.Expect[/* toEqual */12]("example.com", Jest.Expect[/* expect */0](parsed[/* host */4]));
                      }));
                Jest.test("hostname", (function (param) {
                        return Jest.Expect[/* toEqual */12]("example.com", Jest.Expect[/* expect */0](parsed[/* hostname */5]));
                      }));
                return Jest.test("href", (function (param) {
                              return Jest.Expect[/* toEqual */12]("http://example.com", Jest.Expect[/* expect */0](parsed[/* href */0]));
                            }));
              }));
        describe("understands an / as pathname", (function () {
                var parsed = Url.fromString(undefined, "http://example.com:80/");
                Jest.test("port", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](parsed[/* port */6]));
                      }));
                Jest.test("username", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](parsed[/* username */8]));
                      }));
                Jest.test("password", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](parsed[/* password */9]));
                      }));
                Jest.test("pathname", (function (param) {
                        return Jest.Expect[/* toEqual */12]("/", Jest.Expect[/* expect */0](parsed[/* pathname */10]));
                      }));
                Jest.test("host", (function (param) {
                        return Jest.Expect[/* toEqual */12]("example.com", Jest.Expect[/* expect */0](parsed[/* host */4]));
                      }));
                Jest.test("hostname", (function (param) {
                        return Jest.Expect[/* toEqual */12]("example.com", Jest.Expect[/* expect */0](parsed[/* hostname */5]));
                      }));
                return Jest.test("href", (function (param) {
                              return Jest.Expect[/* toEqual */12]("http://example.com/", Jest.Expect[/* expect */0](parsed[/* href */0]));
                            }));
              }));
        describe("does not care about spaces", (function () {
                var parsed = Url.fromString(undefined, "http://x.com/path?that\"s#all, folks");
                Jest.test("port", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](parsed[/* port */6]));
                      }));
                Jest.test("username", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](parsed[/* username */8]));
                      }));
                Jest.test("password", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](parsed[/* password */9]));
                      }));
                Jest.test("pathname", (function (param) {
                        return Jest.Expect[/* toEqual */12]("/path", Jest.Expect[/* expect */0](parsed[/* pathname */10]));
                      }));
                Jest.test("hash", (function (param) {
                        return Jest.Expect[/* toEqual */12]("#all, folks", Jest.Expect[/* expect */0](parsed[/* hash */12]));
                      }));
                Jest.test("querystring", (function (param) {
                        return Jest.Expect[/* toEqual */12]("?that\"s", Jest.Expect[/* expect */0](parsed[/* querystring */11]));
                      }));
                Jest.test("host", (function (param) {
                        return Jest.Expect[/* toEqual */12]("x.com", Jest.Expect[/* expect */0](parsed[/* host */4]));
                      }));
                return Jest.test("hostname", (function (param) {
                              return Jest.Expect[/* toEqual */12]("x.com", Jest.Expect[/* expect */0](parsed[/* hostname */5]));
                            }));
              }));
        describe("accepts + in the url", (function () {
                var parsed = Url.fromString(undefined, "http://x.y.com+a/b/c");
                Jest.test("protocol", (function (param) {
                        return Jest.Expect[/* toEqual */12]("http:", Jest.Expect[/* expect */0](parsed[/* protocol */1]));
                      }));
                Jest.test("host", (function (param) {
                        return Jest.Expect[/* toEqual */12]("x.y.com+a", Jest.Expect[/* expect */0](parsed[/* host */4]));
                      }));
                Jest.test("hostname", (function (param) {
                        return Jest.Expect[/* toEqual */12]("x.y.com+a", Jest.Expect[/* expect */0](parsed[/* hostname */5]));
                      }));
                return Jest.test("pathname", (function (param) {
                              return Jest.Expect[/* toEqual */12]("/b/c", Jest.Expect[/* expect */0](parsed[/* pathname */10]));
                            }));
              }));
        describe("ignores \\ in pathnames", (function () {
                var parsed = Url.fromString(undefined, "http://google.com:80\\@yahoo.com/#what\\is going on");
                Jest.test("port", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](parsed[/* port */6]));
                      }));
                Jest.test("username", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](parsed[/* username */8]));
                      }));
                Jest.test("password", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](parsed[/* password */9]));
                      }));
                Jest.test("hostname", (function (param) {
                        return Jest.Expect[/* toEqual */12]("google.com", Jest.Expect[/* expect */0](parsed[/* hostname */5]));
                      }));
                Jest.test("hash", (function (param) {
                        return Jest.Expect[/* toEqual */12]("#what\\is going on", Jest.Expect[/* expect */0](parsed[/* hash */12]));
                      }));
                var parsed$1 = Url.fromString(undefined, "//\\what-is-up.com");
                return Jest.test("pathname", (function (param) {
                              return Jest.Expect[/* toEqual */12]("/what-is-up.com", Jest.Expect[/* expect */0](parsed$1[/* pathname */10]));
                            }));
              }));
        describe("correctly ignores multiple slashes //", (function () {
                var parsed = Url.fromString(undefined, "////what-is-up.com");
                Jest.test("host", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](parsed[/* host */4]));
                      }));
                return Jest.test("hostname", (function (param) {
                              return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](parsed[/* hostname */5]));
                            }));
              }));
        describe("origin", (function () {
                Jest.test("generates an origin property", (function (param) {
                        var parsed = Url.fromString(undefined, "http://google.com:80/pathname");
                        return Jest.Expect[/* toEqual */12]("http://google.com", Jest.Expect[/* expect */0](parsed[/* origin */3]));
                      }));
                Jest.test("is lowercased", (function (param) {
                        var parsed = Url.fromString(undefined, "HTTP://gOogle.cOm:80/pathname");
                        return Jest.Expect[/* toEqual */12]("http://google.com", Jest.Expect[/* expect */0](parsed[/* origin */3]));
                      }));
                Jest.test("sets to None if no hostname is specified", (function (param) {
                        var parsed = Url.fromString(undefined, "http://");
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](parsed[/* origin */3]));
                      }));
                Jest.testAll("removes default ports for http", /* :: */[
                      /* tuple */[
                        "http://google.com:80/pathname",
                        "http://google.com"
                      ],
                      /* :: */[
                        /* tuple */[
                          "http://google.com:80",
                          "http://google.com"
                        ],
                        /* :: */[
                          /* tuple */[
                            "http://google.com",
                            "http://google.com"
                          ],
                          /* :: */[
                            /* tuple */[
                              "https://google.com:443/pathname",
                              "https://google.com"
                            ],
                            /* :: */[
                              /* tuple */[
                                "http://google.com:443/pathname",
                                "http://google.com:443"
                              ],
                              /* :: */[
                                /* tuple */[
                                  "https://google.com:80/pathname",
                                  "https://google.com:80"
                                ],
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]
                    ], (function (param) {
                        var o = Url.fromString(undefined, param[0]);
                        return Jest.Expect[/* toEqual */12](param[1], Jest.Expect[/* expect */0](o[/* origin */3]));
                      }));
                Jest.test("handles file:// based urls as None", (function (param) {
                        var o = Url.fromString(undefined, "file://google.com/pathname");
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](o[/* origin */3]));
                      }));
                Jest.testAll("removes default ports for ws", /* :: */[
                      /* tuple */[
                        "ws://google.com:80/pathname",
                        "ws://google.com"
                      ],
                      /* :: */[
                        /* tuple */[
                          "wss://google.com:443/pathname",
                          "wss://google.com"
                        ],
                        /* :: */[
                          /* tuple */[
                            "ws://google.com:443/pathname",
                            "ws://google.com:443"
                          ],
                          /* :: */[
                            /* tuple */[
                              "wss://google.com:80/pathname",
                              "wss://google.com:80"
                            ],
                            /* [] */0
                          ]
                        ]
                      ]
                    ], (function (param) {
                        var o = Url.fromString(undefined, param[0]);
                        return Jest.Expect[/* toEqual */12](param[1], Jest.Expect[/* expect */0](o[/* origin */3]));
                      }));
                describe("maintains the port number for non-default port numbers", (function () {
                        var parsed = Url.fromString(undefined, "http://google.com:8080/pathname");
                        Jest.test("host", (function (param) {
                                return Jest.Expect[/* toEqual */12]("google.com:8080", Jest.Expect[/* expect */0](parsed[/* host */4]));
                              }));
                        return Jest.test("href", (function (param) {
                                      return Jest.Expect[/* toEqual */12]("http://google.com:8080/pathname", Jest.Expect[/* expect */0](parsed[/* href */0]));
                                    }));
                      }));
                return /* () */0;
              }));
        describe("protocol", (function () {
                Jest.testAll("extracts the right protocol from a url", /* :: */[
                      /* tuple */[
                        "http://example.com",
                        "http:"
                      ],
                      /* :: */[
                        /* tuple */[
                          "mailto:test@example.com",
                          "mailto:"
                        ],
                        /* :: */[
                          /* tuple */[
                            "data:text/html,%3Ch1%3EHello%2C%20World!%3C%2Fh1%3E",
                            "data:"
                          ],
                          /* :: */[
                            /* tuple */[
                              "sip:alice@atlanta.com",
                              "sip:"
                            ],
                            /* [] */0
                          ]
                        ]
                      ]
                    ], (function (param) {
                        var data = Url.fromString(undefined, param[0]);
                        return Jest.Expect[/* toEqual */12](param[1], Jest.Expect[/* expect */0](data[/* protocol */1]));
                      }));
                Jest.testAll("extracts the right path from protocol from a url", /* :: */[
                      /* tuple */[
                        "http://example.com",
                        undefined
                      ],
                      /* :: */[
                        /* tuple */[
                          "mailto:test@example.com",
                          "test@example.com"
                        ],
                        /* :: */[
                          /* tuple */[
                            "data:text/html,%3Ch1%3EHello%2C%20World!%3C%2Fh1%3E",
                            "text/html,%3Ch1%3EHello%2C%20World!%3C%2Fh1%3E"
                          ],
                          /* :: */[
                            /* tuple */[
                              "sip:alice@atlanta.com",
                              "alice@atlanta.com"
                            ],
                            /* [] */0
                          ]
                        ]
                      ]
                    ], (function (param) {
                        var data = Url.fromString(undefined, param[0]);
                        return Jest.Expect[/* toEqual */12](param[1], Jest.Expect[/* expect */0](data[/* pathname */10]));
                      }));
                return Jest.test("converts protocol to lowercase", (function (param) {
                              return Jest.Expect[/* toEqual */12]("http:", Jest.Expect[/* expect */0](Url.fromString(undefined, "HTTP://example.com")[/* protocol */1]));
                            }));
              }));
        describe("ip", (function () {
                describe("parses ipv6", (function () {
                        var parsed = Url.fromString(undefined, "http://[1080:0:0:0:8:800:200C:417A]:61616/foo/bar?q=z");
                        Jest.test("port", (function (param) {
                                return Jest.Expect[/* toEqual */12](61616, Jest.Expect[/* expect */0](parsed[/* port */6]));
                              }));
                        Jest.test("querystring", (function (param) {
                                return Jest.Expect[/* toEqual */12]("?q=z", Jest.Expect[/* expect */0](parsed[/* querystring */11]));
                              }));
                        Jest.test("protocol", (function (param) {
                                return Jest.Expect[/* toEqual */12]("http:", Jest.Expect[/* expect */0](parsed[/* protocol */1]));
                              }));
                        Jest.test("hostname", (function (param) {
                                return Jest.Expect[/* toEqual */12]("[1080:0:0:0:8:800:200c:417a]", Jest.Expect[/* expect */0](parsed[/* hostname */5]));
                              }));
                        Jest.test("pathname", (function (param) {
                                return Jest.Expect[/* toEqual */12]("/foo/bar", Jest.Expect[/* expect */0](parsed[/* pathname */10]));
                              }));
                        return Jest.test("href", (function (param) {
                                      return Jest.Expect[/* toEqual */12]("http://[1080:0:0:0:8:800:200c:417a]:61616/foo/bar?q=z", Jest.Expect[/* expect */0](parsed[/* href */0]));
                                    }));
                      }));
                describe("parses ipv6 with auth", (function () {
                        var url = "http://user:password@[3ffe:2a00:100:7031::1]:8080";
                        var parsed = Url.fromString(undefined, url);
                        Jest.test("username", (function (param) {
                                return Jest.Expect[/* toEqual */12]("user", Jest.Expect[/* expect */0](parsed[/* username */8]));
                              }));
                        Jest.test("password", (function (param) {
                                return Jest.Expect[/* toEqual */12]("password", Jest.Expect[/* expect */0](parsed[/* password */9]));
                              }));
                        Jest.test("host", (function (param) {
                                return Jest.Expect[/* toEqual */12]("[3ffe:2a00:100:7031::1]:8080", Jest.Expect[/* expect */0](parsed[/* host */4]));
                              }));
                        Jest.test("hostname", (function (param) {
                                return Jest.Expect[/* toEqual */12]("[3ffe:2a00:100:7031::1]", Jest.Expect[/* expect */0](parsed[/* hostname */5]));
                              }));
                        return Jest.test("href", (function (param) {
                                      return Jest.Expect[/* toEqual */12](url, Jest.Expect[/* expect */0](parsed[/* href */0]));
                                    }));
                      }));
                describe("parses ipv4", (function () {
                        var url = "http://222.148.142.13:61616/foo/bar?q=z";
                        var parsed = Url.fromString(undefined, url);
                        Jest.test("port", (function (param) {
                                return Jest.Expect[/* toEqual */12](61616, Jest.Expect[/* expect */0](parsed[/* port */6]));
                              }));
                        Jest.test("querystring", (function (param) {
                                return Jest.Expect[/* toEqual */12]("?q=z", Jest.Expect[/* expect */0](parsed[/* querystring */11]));
                              }));
                        Jest.test("protocol", (function (param) {
                                return Jest.Expect[/* toEqual */12]("http:", Jest.Expect[/* expect */0](parsed[/* protocol */1]));
                              }));
                        Jest.test("hostname", (function (param) {
                                return Jest.Expect[/* toEqual */12]("222.148.142.13", Jest.Expect[/* expect */0](parsed[/* hostname */5]));
                              }));
                        Jest.test("pathname", (function (param) {
                                return Jest.Expect[/* toEqual */12]("/foo/bar", Jest.Expect[/* expect */0](parsed[/* pathname */10]));
                              }));
                        return Jest.test("href", (function (param) {
                                      return Jest.Expect[/* toEqual */12](url, Jest.Expect[/* expect */0](parsed[/* href */0]));
                                    }));
                      }));
                return /* () */0;
              }));
        describe("auth", (function () {
                describe("does not lowercase the USER:PASS", (function () {
                        var parsed = Url.fromString(undefined, "HTTP://USER:PASS@EXAMPLE.COM");
                        Jest.test("username", (function (param) {
                                return Jest.Expect[/* toEqual */12]("USER", Jest.Expect[/* expect */0](parsed[/* username */8]));
                              }));
                        Jest.test("password", (function (param) {
                                return Jest.Expect[/* toEqual */12]("PASS", Jest.Expect[/* expect */0](parsed[/* password */9]));
                              }));
                        Jest.test("protocol", (function (param) {
                                return Jest.Expect[/* toEqual */12]("http:", Jest.Expect[/* expect */0](parsed[/* protocol */1]));
                              }));
                        Jest.test("host", (function (param) {
                                return Jest.Expect[/* toEqual */12]("example.com", Jest.Expect[/* expect */0](parsed[/* host */4]));
                              }));
                        return Jest.test("hostname", (function (param) {
                                      return Jest.Expect[/* toEqual */12]("example.com", Jest.Expect[/* expect */0](parsed[/* hostname */5]));
                                    }));
                      }));
                describe("accepts @ in pathnames", (function () {
                        var parsed = Url.fromString(undefined, "http://mt0.google.com/vt/lyrs=m@114&hl=en&src=api&x=2&y=2&z=3&s=");
                        Jest.test("pathname", (function (param) {
                                return Jest.Expect[/* toEqual */12]("/vt/lyrs=m@114&hl=en&src=api&x=2&y=2&z=3&s=", Jest.Expect[/* expect */0](parsed[/* pathname */10]));
                              }));
                        Jest.test("username", (function (param) {
                                return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](parsed[/* username */8]));
                              }));
                        return Jest.test("password", (function (param) {
                                      return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](parsed[/* password */9]));
                                    }));
                      }));
                describe("does not require passwords for auth", (function () {
                        var url = "http://user@www.example.com/";
                        var parsed = Url.fromString(undefined, url);
                        Jest.test("password", (function (param) {
                                return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](parsed[/* password */9]));
                              }));
                        Jest.test("pathname", (function (param) {
                                return Jest.Expect[/* toEqual */12]("/", Jest.Expect[/* expect */0](parsed[/* pathname */10]));
                              }));
                        Jest.test("username", (function (param) {
                                return Jest.Expect[/* toEqual */12]("user", Jest.Expect[/* expect */0](parsed[/* username */8]));
                              }));
                        Jest.test("protocol", (function (param) {
                                return Jest.Expect[/* toEqual */12]("http:", Jest.Expect[/* expect */0](parsed[/* protocol */1]));
                              }));
                        Jest.test("hostname", (function (param) {
                                return Jest.Expect[/* toEqual */12]("www.example.com", Jest.Expect[/* expect */0](parsed[/* hostname */5]));
                              }));
                        return Jest.test("href", (function (param) {
                                      return Jest.Expect[/* toEqual */12](url, Jest.Expect[/* expect */0](parsed[/* href */0]));
                                    }));
                      }));
                return /* () */0;
              }));
        Jest.test("accepts multiple ???", (function (param) {
                return Jest.Expect[/* toEqual */12]("???&hl=en&src=api&x=2&y=2&z=3&s=", Jest.Expect[/* expect */0](Url.fromString(undefined, "http://mt0.google.com/vt/lyrs=m@114???&hl=en&src=api&x=2&y=2&z=3&s=")[/* querystring */11]));
              }));
        describe("accepts a string as source argument", (function () {
                var data = Url.fromString(Url.fromString(undefined, "http://sub.example.com/bar?foo=bar#hash"), "/foo");
                Jest.test("port", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](data[/* port */6]));
                      }));
                Jest.test("host", (function (param) {
                        return Jest.Expect[/* toEqual */12]("sub.example.com", Jest.Expect[/* expect */0](data[/* host */4]));
                      }));
                return Jest.test("href", (function (param) {
                              return Jest.Expect[/* toEqual */12]("http://sub.example.com/foo", Jest.Expect[/* expect */0](data[/* href */0]));
                            }));
              }));
        describe("inheritance", (function () {
                describe("does not inherit port numbers for non relative urls", (function () {
                        var data = Url.fromString(Url.fromString(undefined, "http://sub.example.com:808/"), "http://localhost");
                        Jest.test("port", (function (param) {
                                return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](data[/* port */6]));
                              }));
                        Jest.test("host", (function (param) {
                                return Jest.Expect[/* toEqual */12]("localhost", Jest.Expect[/* expect */0](data[/* host */4]));
                              }));
                        return Jest.test("href", (function (param) {
                                      return Jest.Expect[/* toEqual */12]("http://localhost", Jest.Expect[/* expect */0](data[/* href */0]));
                                    }));
                      }));
                describe("inherits port numbers for relative urls", (function () {
                        var data = Url.fromString(Url.fromString(undefined, "http://sub.example.com:808/"), "/foo");
                        Jest.test("port", (function (param) {
                                return Jest.Expect[/* toEqual */12](808, Jest.Expect[/* expect */0](data[/* port */6]));
                              }));
                        Jest.test("hostname", (function (param) {
                                return Jest.Expect[/* toEqual */12]("sub.example.com", Jest.Expect[/* expect */0](data[/* hostname */5]));
                              }));
                        Jest.test("host", (function (param) {
                                return Jest.Expect[/* toEqual */12]("sub.example.com:808", Jest.Expect[/* expect */0](data[/* host */4]));
                              }));
                        return Jest.test("href", (function (param) {
                                      return Jest.Expect[/* toEqual */12]("http://sub.example.com:808/foo", Jest.Expect[/* expect */0](data[/* href */0]));
                                    }));
                      }));
                describe("inherits slashes for relative urls", (function () {
                        var data = Url.fromString(/* record */[
                              /* href */"http://example.com/",
                              /* protocol */"http:",
                              /* slashes */true,
                              /* origin */"http://example.com",
                              /* host */"example.com",
                              /* hostname */"example.com",
                              /* port */undefined,
                              /* auth */undefined,
                              /* username */undefined,
                              /* password */undefined,
                              /* pathname */"/",
                              /* querystring */undefined,
                              /* hash */undefined
                            ], "/foo");
                        Jest.test("slashes", (function (param) {
                                return Jest.Expect[/* toEqual */12](true, Jest.Expect[/* expect */0](data[/* slashes */2]));
                              }));
                        return Jest.test("href", (function (param) {
                                      return Jest.Expect[/* toEqual */12]("http://example.com/foo", Jest.Expect[/* expect */0](data[/* href */0]));
                                    }));
                      }));
                describe("inherits protocol for relative protocols", (function () {
                        var data = Url.fromString(Url.fromString(undefined, "http://sub.example.com:808/"), "//foo.com/foo");
                        Jest.test("port", (function (param) {
                                return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](data[/* port */6]));
                              }));
                        Jest.test("host", (function (param) {
                                return Jest.Expect[/* toEqual */12]("foo.com", Jest.Expect[/* expect */0](data[/* host */4]));
                              }));
                        Jest.test("protocol", (function (param) {
                                return Jest.Expect[/* toEqual */12]("http:", Jest.Expect[/* expect */0](data[/* protocol */1]));
                              }));
                        return Jest.test("href", (function (param) {
                                      return Jest.Expect[/* toEqual */12]("http://foo.com/foo", Jest.Expect[/* expect */0](data[/* href */0]));
                                    }));
                      }));
                describe("does not inherit pathname for non relative urls", (function () {
                        var data = Url.fromString(Url.fromString(undefined, "http://foo:bar@sub.example.com/bar?foo=bar#hash"), "http://localhost");
                        Jest.test("port", (function (param) {
                                return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](data[/* port */6]));
                              }));
                        Jest.test("host", (function (param) {
                                return Jest.Expect[/* toEqual */12]("localhost", Jest.Expect[/* expect */0](data[/* host */4]));
                              }));
                        return Jest.test("href", (function (param) {
                                      return Jest.Expect[/* toEqual */12]("http://localhost", Jest.Expect[/* expect */0](data[/* href */0]));
                                    }));
                      }));
                Jest.testAll("resolves pathname for relative urls", /* :: */[
                      /* tuple */[
                        "",
                        "http://foo.com/",
                        "/"
                      ],
                      /* :: */[
                        /* tuple */[
                          "b/c",
                          "http://foo.com/a",
                          "/b/c"
                        ],
                        /* :: */[
                          /* tuple */[
                            "b/c",
                            "http://foo.com/a/",
                            "/a/b/c"
                          ],
                          /* :: */[
                            /* tuple */[
                              ".",
                              "http://foo.com",
                              "/"
                            ],
                            /* :: */[
                              /* tuple */[
                                "./",
                                "http://foo.com",
                                "/"
                              ],
                              /* :: */[
                                /* tuple */[
                                  "./.",
                                  "http://foo.com",
                                  "/"
                                ],
                                /* :: */[
                                  /* tuple */[
                                    ".",
                                    "http://foo.com/a",
                                    "/"
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      ".",
                                      "http://foo.com/a/",
                                      "/a/"
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        "./",
                                        "http://foo.com/a/",
                                        "/a/"
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          "./.",
                                          "http://foo.com/a/",
                                          "/a/"
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            "./b",
                                            "http://foo.com/a/",
                                            "/a/b"
                                          ],
                                          /* :: */[
                                            /* tuple */[
                                              "..",
                                              "http://foo.com/a/b",
                                              "/"
                                            ],
                                            /* :: */[
                                              /* tuple */[
                                                "..",
                                                "http://foo.com/a/b/",
                                                "/a/"
                                              ],
                                              /* :: */[
                                                /* tuple */[
                                                  "../..",
                                                  "http://foo.com/a/b",
                                                  "/"
                                                ],
                                                /* :: */[
                                                  /* tuple */[
                                                    "../..",
                                                    "http://foo.com/a/b/",
                                                    "/"
                                                  ],
                                                  /* :: */[
                                                    /* tuple */[
                                                      "../../../../c",
                                                      "http://foo.com/a/b/",
                                                      "/c"
                                                    ],
                                                    /* :: */[
                                                      /* tuple */[
                                                        "./../d",
                                                        "http://foo.com/a/b/c",
                                                        "/a/d"
                                                      ],
                                                      /* :: */[
                                                        /* tuple */[
                                                          "d/e/f/./../../g",
                                                          "http://foo.com/a/b/c",
                                                          "/a/b/d/g"
                                                        ],
                                                        /* [] */0
                                                      ]
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ], (function (param) {
                        var data = Url.fromString(Url.fromString(undefined, param[1]), param[0]);
                        return Jest.Expect[/* toEqual */12](param[2], Jest.Expect[/* expect */0](data[/* pathname */10]));
                      }));
                describe("does not inherit hashes and query strings from source object", (function () {
                        var data = Url.fromString(Url.fromString(undefined, "http://sub.example.com/bar?foo=bar#hash"), "/foo");
                        Jest.test("port", (function (param) {
                                return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](data[/* port */6]));
                              }));
                        Jest.test("host", (function (param) {
                                return Jest.Expect[/* toEqual */12]("sub.example.com", Jest.Expect[/* expect */0](data[/* host */4]));
                              }));
                        return Jest.test("href", (function (param) {
                                      return Jest.Expect[/* toEqual */12]("http://sub.example.com/foo", Jest.Expect[/* expect */0](data[/* href */0]));
                                    }));
                      }));
                describe("does not inherit auth from source object", (function () {
                        var base = Url.fromString(undefined, "http://foo:bar@sub.example.com");
                        var data = Url.fromString(base, "/foo");
                        Jest.test("port", (function (param) {
                                return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](data[/* port */6]));
                              }));
                        Jest.test("username", (function (param) {
                                return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](data[/* username */8]));
                              }));
                        Jest.test("password", (function (param) {
                                return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](data[/* password */9]));
                              }));
                        Jest.test("host", (function (param) {
                                return Jest.Expect[/* toEqual */12]("sub.example.com", Jest.Expect[/* expect */0](data[/* host */4]));
                              }));
                        return Jest.test("href", (function (param) {
                                      return Jest.Expect[/* toEqual */12]("http://sub.example.com/foo", Jest.Expect[/* expect */0](data[/* href */0]));
                                    }));
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

/*  Not a pure module */
