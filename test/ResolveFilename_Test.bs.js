// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Url = require("../src/Url.bs.js");
var Jest = require("@glennsl/bs-jest/src/jest.js");

describe("resolvePathname", (function () {
        Jest.test("works when from is not given", (function (param) {
                return Jest.Expect[/* toEqual */12]("c", Jest.Expect[/* expect */0](Url.resolvePathname("c", undefined, /* () */0)));
              }));
        Jest.test("works when from is relative", (function (param) {
                return Jest.Expect[/* toEqual */12]("a/c", Jest.Expect[/* expect */0](Url.resolvePathname("c", "a/b", /* () */0)));
              }));
        Jest.test("works when to is absolute", (function (param) {
                return Jest.Expect[/* toEqual */12]("/c", Jest.Expect[/* expect */0](Url.resolvePathname("/c", "/a/b", /* () */0)));
              }));
        Jest.test("works when to is empty", (function (param) {
                return Jest.Expect[/* toEqual */12]("/a/b", Jest.Expect[/* expect */0](Url.resolvePathname(undefined, "/a/b", /* () */0)));
              }));
        Jest.test("works when to is a sibling of the parent", (function (param) {
                return Jest.Expect[/* toEqual */12]("/c", Jest.Expect[/* expect */0](Url.resolvePathname("../c", "/a/b", /* () */0)));
              }));
        Jest.test("works when to is a sibling path", (function (param) {
                return Jest.Expect[/* toEqual */12]("/a/c", Jest.Expect[/* expect */0](Url.resolvePathname("c", "/a/b", /* () */0)));
              }));
        Jest.test("works when from is an index path", (function (param) {
                return Jest.Expect[/* toEqual */12]("/a/c", Jest.Expect[/* expect */0](Url.resolvePathname("c", "/a/", /* () */0)));
              }));
        Jest.test("works when to points to the parent directory", (function (param) {
                return Jest.Expect[/* toEqual */12]("/", Jest.Expect[/* expect */0](Url.resolvePathname("..", "/a/b", /* () */0)));
              }));
        return Jest.testAll("resolvePathname(~to_, ~from) === expected", /* :: */[
                    /* tuple */[
                      "/foo/bar/baz",
                      "quux",
                      "/foo/bar/quux"
                    ],
                    /* :: */[
                      /* tuple */[
                        "/foo/bar/baz",
                        "quux/asdf",
                        "/foo/bar/quux/asdf"
                      ],
                      /* :: */[
                        /* tuple */[
                          "/foo/bar/baz",
                          "quux/baz",
                          "/foo/bar/quux/baz"
                        ],
                        /* :: */[
                          /* tuple */[
                            "/foo/bar/baz",
                            "../quux/baz",
                            "/foo/quux/baz"
                          ],
                          /* :: */[
                            /* tuple */[
                              "/foo/bar/baz",
                              "/bar",
                              "/bar"
                            ],
                            /* :: */[
                              /* tuple */[
                                "/foo/bar/baz/",
                                "quux",
                                "/foo/bar/baz/quux"
                              ],
                              /* :: */[
                                /* tuple */[
                                  "/foo/bar/baz/",
                                  "quux/baz",
                                  "/foo/bar/baz/quux/baz"
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "/foo/bar/baz",
                                    "../../../../../../../../quux/baz",
                                    "/quux/baz"
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "/foo/bar/baz",
                                      "../../../../../../../quux/baz",
                                      "/quux/baz"
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        "/foo",
                                        ".",
                                        "/"
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          "/foo",
                                          "..",
                                          "/"
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            "/foo/",
                                            ".",
                                            "/foo/"
                                          ],
                                          /* :: */[
                                            /* tuple */[
                                              "/foo/",
                                              "..",
                                              "/"
                                            ],
                                            /* :: */[
                                              /* tuple */[
                                                "/foo/bar",
                                                ".",
                                                "/foo/"
                                              ],
                                              /* :: */[
                                                /* tuple */[
                                                  "/foo/bar",
                                                  "..",
                                                  "/"
                                                ],
                                                /* :: */[
                                                  /* tuple */[
                                                    "/foo/bar/",
                                                    ".",
                                                    "/foo/bar/"
                                                  ],
                                                  /* :: */[
                                                    /* tuple */[
                                                      "/foo/bar/",
                                                      "..",
                                                      "/foo/"
                                                    ],
                                                    /* :: */[
                                                      /* tuple */[
                                                        "foo/bar",
                                                        "../../../baz",
                                                        "../../baz"
                                                      ],
                                                      /* :: */[
                                                        /* tuple */[
                                                          "foo/bar/",
                                                          "../../../baz",
                                                          "../baz"
                                                        ],
                                                        /* :: */[
                                                          /* tuple */[
                                                            "/foo/bar/baz",
                                                            "/../etc/passwd",
                                                            "/etc/passwd"
                                                          ],
                                                          /* [] */0
                                                        ]
                                                      ]
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ], (function (param) {
                      return Jest.Expect[/* toEqual */12](param[2], Jest.Expect[/* expect */0](Url.resolvePathname(param[1], param[0], /* () */0)));
                    }));
      }));

var resolvePathname = Url.resolvePathname;

exports.resolvePathname = resolvePathname;
/*  Not a pure module */
